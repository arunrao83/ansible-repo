---
- name: Gather Host Info
  hosts: elasticsearch_master:elasticsearch_data
  gather_facts: true
  
- name: Elasticsearch rolling upgrade master

  hosts: elasticsearch_master:elasticsearch_data
  serial: 1
  become: yes
  gather_facts: true
  vars:
    es_disable_allocation:  '{"transient":{"cluster.routing.allocation.enable":"none"}}'
    es_enable_allocation: '{"transient":{"cluster.routing.allocation.enable": "all"}}'
    es_http_port: 9200
    es_transport_port: 9300
    # desired version to upgrade to:
    es_version: "2.3.4"
    es_scripts: false
    es_templates: false
    es_version_lock: false
    ansible_user: ansible
    es_start_service: true
    es_plugins:
     - plugin: elasticsearch/license
       version: latest
    all_masters: |
               {% set comma = joiner(',') %}
               {% for host in groups['elasticsearch_master'] -%}
                 {{ comma() }}{{ hostvars[host].ansible_default_ipv4.address}}
               {%- endfor -%}

  pre_tasks:
      - name: make sure elasticsearch service is running
        service: name="{{ group_names[0] | regex_replace('^.*_(.*)$', '\\1') }}_elasticsearch" enabled=yes state=started
        register: response

      - name: Get Node attributes
        uri: url=http://localhost:{{ es_http_port }}/_nodes/{{ ansible_eth0["ipv4"]["address"] }}/settings metho=GET
        register: node_attributes
      # this first step is a overkill, but here
      # in case the upgrade was cancelled by user mid playbook run

      - name: Wait for elasticsearch node to come back up if it was stopped
        wait_for: port={{ es_transport_port }} delay=45
        when: response.changed == true

      # the ansible the uri action needs httplib2
      - name: ensure python27-httplib2 is installed
        yum: name=python27-httplib2 state=present

      - name: check current version
        uri: url=http://localhost:{{ es_http_port }} method=GET
        register: version_found
        retries: 10
        delay: 10

      - name: Display Current Elasticsearch Version
        debug: var=version_found.json.version.number 

       # this step is key!!!  Don't restart more nodes
       # until all shards have completed recovery
      - name: Wait for cluster health to return to green
        uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
        register: response
        until: "response.json.status == 'green'"
        retries: 50
        delay: 30
        when: version_found.json.version.number != '{{ es_version }}'     

      - name: Disable shard allocation for the cluster
        uri: url=http://localhost:{{ es_http_port }}/_cluster/settings method=PUT body={{ es_disable_allocation }} body_format=json
        when: version_found.json.version.number != '{{ es_version }}'

      - name: synced flush on the node
        uri: url=http://localhost:{{ es_http_port }}/_flush/synced method=POST
        when: version_found.json.version.number != '{{ es_version }}'  

      - name: Shutdown elasticsearch node
        service: name="{{ node_attributes.json.nodes.values()[0].name | regex_replace('^.*-(.*)$', '\\1') }}_elasticsearch" state=stopped
        when: version_found.json.version.number != '{{ es_version }}'
  
  roles:
      - { role: elasticsearch, when: "version_found.json.version.number != '{{ es_version }}'", es_instance_name: "{{ node_attributes.json.nodes.values()[0].name | regex_replace('^.*-(.*)$', '\\1') }}", es_heap_size: "1g",
      es_config: {
          cluster.name: "test-cluster",
          discovery.zen.ping.unicast.hosts: "{{ all_masters | replace('\n', '') }}",
          http.port: 9200,
          transport.tcp.port: 9300,
          node.data: '{{ node_attributes.json.nodes.values()[0].settings.node.data }}',
          node.master: '{{ node_attributes.json.nodes.values()[0].settings.node.master }}',
          network.host: [_site_,_local_],
          bootstrap.mlockall: false,
          discovery.zen.ping.multicast.enabled: false }
      }
  
  tasks:
      
     - name: Wait for elasticsearch node to come back up
       wait_for: port={{ es_transport_port }} delay=35
       when: version_found.json.version.number != '{{ es_version }}'
     
     - name: Enable shard allocation for the cluster
       uri: url=http://localhost:{{ es_http_port }}/_cluster/settings method=PUT body={{ es_enable_allocation }} body_format=json
       register: response
      # next line is boolean not string, so no quotes around true
      # use python truthiness
       until: "response.json.acknowledged == true"
       retries: 5
       delay: 30
       when: version_found.json.version.number != '{{ es_version }}'
      
     - name: Wait for cluster health to return to yellow or green
       uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
       register: response
       until: "response.json.status == 'yellow' or response.json.status == 'green'"
       retries: 5
       delay: 30
       when: version_found.json.version.number != '{{ es_version }}'



